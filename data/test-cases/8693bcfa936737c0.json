{"uid":"8693bcfa936737c0","name":"Вкладка Exports","fullName":"test_jne.Test_check_run_configurator_for_check_windows#test_station_settings_one","historyId":"2f1b3f258604fb49eaf36760524e21a4","time":{"start":1684405875900,"stop":1684405876654,"duration":754},"status":"broken","statusMessage":"OSError: Failed to read buttons/window_button_exports.PNG because file is missing, has improper permissions, or is an unsupported or invalid format","statusTrace":"self = <test_jne.Test_check_run_configurator_for_check_windows object at 0x00000238FF2A7050>\n\n    @allure.title(\"Вкладка Exports\")\n    def test_station_settings_one(self):\n        with allure.step(\"Вкладка Exports\"):\n            timeout = time.time() + 400\n            while True:\n                button_exports = pyautogui.locateOnScreen('buttons/butto_exports.PNG', confidence=0.9)\n                if button_exports:\n                    pyautogui.click(button_exports)\n>                   window_button_exports = pyautogui.locateOnScreen('buttons/window_button_exports.PNG',\n                                                                     confidence=0.9)\n\ntest_jne.py:1382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py:175: in wrapper\n    return wrappedFunction(*args, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py:213: in locateOnScreen\n    return pyscreeze.locateOnScreen(*args, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:373: in locateOnScreen\n    retVal = locate(image, screenshotIm, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:353: in locate\n    points = tuple(locateAll(needleImage, haystackImage, **kwargs))\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:207: in _locateAll_opencv\n    needleImage = _load_cv2(needleImage, grayscale)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nimg = 'buttons/window_button_exports.PNG', grayscale = False\n\n    def _load_cv2(img, grayscale=None):\n        \"\"\"\n        TODO\n        \"\"\"\n        # load images if given filename, or convert as needed to opencv\n        # Alpha layer just causes failures at this point, so flatten to RGB.\n        # RGBA: load with -1 * cv2.CV_LOAD_IMAGE_COLOR to preserve alpha\n        # to matchTemplate, need template and image to be the same wrt having alpha\n    \n        if grayscale is None:\n            grayscale = GRAYSCALE_DEFAULT\n        if isinstance(img, (str, unicode)):\n            # The function imread loads an image from the specified file and\n            # returns it. If the image cannot be read (because of missing\n            # file, improper permissions, unsupported or invalid format),\n            # the function returns an empty matrix\n            # http://docs.opencv.org/3.0-beta/modules/imgcodecs/doc/reading_and_writing_images.html\n            if grayscale:\n                img_cv = cv2.imread(img, LOAD_GRAYSCALE)\n            else:\n                img_cv = cv2.imread(img, LOAD_COLOR)\n            if img_cv is None:\n>               raise IOError(\"Failed to read %s because file is missing, \"\n                              \"has improper permissions, or is an \"\nE                             OSError: Failed to read buttons/window_button_exports.PNG because file is missing, has improper permissions, or is an unsupported or invalid format\n\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:170: OSError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"OSError: Failed to read buttons/window_button_exports.PNG because file is missing, has improper permissions, or is an unsupported or invalid format","statusTrace":"self = <test_jne.Test_check_run_configurator_for_check_windows object at 0x00000238FF2A7050>\n\n    @allure.title(\"Вкладка Exports\")\n    def test_station_settings_one(self):\n        with allure.step(\"Вкладка Exports\"):\n            timeout = time.time() + 400\n            while True:\n                button_exports = pyautogui.locateOnScreen('buttons/butto_exports.PNG', confidence=0.9)\n                if button_exports:\n                    pyautogui.click(button_exports)\n>                   window_button_exports = pyautogui.locateOnScreen('buttons/window_button_exports.PNG',\n                                                                     confidence=0.9)\n\ntest_jne.py:1382: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py:175: in wrapper\n    return wrappedFunction(*args, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py:213: in locateOnScreen\n    return pyscreeze.locateOnScreen(*args, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:373: in locateOnScreen\n    retVal = locate(image, screenshotIm, **kwargs)\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:353: in locate\n    points = tuple(locateAll(needleImage, haystackImage, **kwargs))\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:207: in _locateAll_opencv\n    needleImage = _load_cv2(needleImage, grayscale)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nimg = 'buttons/window_button_exports.PNG', grayscale = False\n\n    def _load_cv2(img, grayscale=None):\n        \"\"\"\n        TODO\n        \"\"\"\n        # load images if given filename, or convert as needed to opencv\n        # Alpha layer just causes failures at this point, so flatten to RGB.\n        # RGBA: load with -1 * cv2.CV_LOAD_IMAGE_COLOR to preserve alpha\n        # to matchTemplate, need template and image to be the same wrt having alpha\n    \n        if grayscale is None:\n            grayscale = GRAYSCALE_DEFAULT\n        if isinstance(img, (str, unicode)):\n            # The function imread loads an image from the specified file and\n            # returns it. If the image cannot be read (because of missing\n            # file, improper permissions, unsupported or invalid format),\n            # the function returns an empty matrix\n            # http://docs.opencv.org/3.0-beta/modules/imgcodecs/doc/reading_and_writing_images.html\n            if grayscale:\n                img_cv = cv2.imread(img, LOAD_GRAYSCALE)\n            else:\n                img_cv = cv2.imread(img, LOAD_COLOR)\n            if img_cv is None:\n>               raise IOError(\"Failed to read %s because file is missing, \"\n                              \"has improper permissions, or is an \"\nE                             OSError: Failed to read buttons/window_button_exports.PNG because file is missing, has improper permissions, or is an unsupported or invalid format\n\n..\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py:170: OSError","steps":[{"name":"Вкладка Exports","time":{"start":1684405875900,"stop":1684405876651,"duration":751},"status":"broken","statusMessage":"OSError: Failed to read buttons/window_button_exports.PNG because file is missing, has improper permissions, or is an unsupported or invalid format\n","statusTrace":"  File \"C:\\Users\\User\\pythonProject1\\test_jne.py\", line 1382, in test_station_settings_one\n    window_button_exports = pyautogui.locateOnScreen('buttons/window_button_exports.PNG',\n                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py\", line 175, in wrapper\n    return wrappedFunction(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyautogui\\__init__.py\", line 213, in locateOnScreen\n    return pyscreeze.locateOnScreen(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py\", line 373, in locateOnScreen\n    retVal = locate(image, screenshotIm, **kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py\", line 353, in locate\n    points = tuple(locateAll(needleImage, haystackImage, **kwargs))\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py\", line 207, in _locateAll_opencv\n    needleImage = _load_cv2(needleImage, grayscale)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\interpreter_python\\Lib\\site-packages\\pyscreeze\\__init__.py\", line 170, in _load_cv2\n    raise IOError(\"Failed to read %s because file is missing, \"\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"f246b48c8feac5ac","name":"stderr","source":"f246b48c8feac5ac.txt","type":"text/plain","size":153}],"parameters":[],"hasContent":true,"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"feature","value":"Запуск конфигуратора для проверки окон"},{"name":"suite","value":"test_jne"},{"name":"subSuite","value":"Test_check_run_configurator_for_check_windows"},{"name":"host","value":"PCLite"},{"name":"thread","value":"5668-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_jne"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"8693bcfa936737c0.json","parameterValues":[]}